# vim:ft=zsh
function tmux() {
  emulate -L zsh

  # Make sure even pre-existing tmux sessions use the latest SSH_AUTH_SOCK.
  # (Inspired by: https://gist.github.com/lann/6771001)
  local SOCK_SYMLINK=~/.ssh/ssh_auth_sock
  if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
  fi

  # If provided with args, pass them through.
  if [[ -n "$@" ]]; then
    env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux "$@"
    return
  fi

  # Check for .tmux file
  if [[ -x .tmux && $PWD != $HOME ]]; then
    ./.tmux
    return
  fi
  # Attach to existing session, or create one, based on current directory.
  local SESSION_NAME=$(basename "${$(pwd)//[.:]/_}")
  tmux new -A -s "$SESSION_NAME"
}

function +vi-git-untracked() {
  emulate -L zsh
  if [[ -n $(git ls-files --exclude-standard --others 2> /dev/null) ]]; then
    hook_com[unstaged]+="%F{blue}●%f"
  fi
}


# Anonymous function to avoid leaking variables.
function () {
  # Check for tmux by looking at $TERM, because $TMUX won't be propagated to any
  # nested sudo shells but $TERM will.
  local TMUXING=$([ ! -z $TMUX ] && echo tmux)
  if [ -n "$TMUXING" -a -n "$TMUX" ]; then
    # In a a tmux session created in a non-root or root shell.
    local LVL=$(($SHLVL - 1))
  else
    # Either in a root shell created inside a non-root tmux session,
    # or not in a tmux session.
    local LVL=$SHLVL
  fi
  if [[ $EUID -eq 0 ]]; then
    local SUFFIX='%F{yellow}%n%f'$(printf '%%F{yellow}\u276f%.0s%%f' {1..$LVL})
  else
    local SUFFIX=$(printf '%%F{red}\u276f%.0s%%f' {1..$LVL})
  fi
  export PS1="%F{green}${SSH_TTY:+%n@%m}%f%B${SSH_TTY:+:}%b%F{blue}%B%1~%b%F{yellow}%B%(1j.*.)%(?..!)%b%f %B${SUFFIX}%b "
  if [[ -n "$TMUXING" ]]; then
    # Outside tmux, ZLE_RPROMPT_INDENT ends up eating the space after PS1, and
    # prompt still gets corrupted even if we add an extra space to compensate.
    export ZLE_RPROMPT_INDENT=0
  fi
}

function set_token() {
  export token=`curl 'https://api-dev.myhotel.io/security/login' \
    -H 'x-api-key: Upy1BTFzD63LFLzlkeCy72gFJokPrUGC4ZLUtbIq' \
    -H 'content-type: application/json' \
    --data-raw '{"username":"ghourton@myhotel.com.es","password":"4cda67c9f1dc4ba1b675838c0ba96ad7"}' |
    jq --raw-output '.token'`
}

function mh_dev() {
  mysql -A -u myhotel_dev \
    -p'1035#dEvmY0t3l' \
    -h db-dev.myhotel.io
    -e $1 \
      myhotel_production
}

function mh_prod() {
  mysql -A -u myhotel \
    -p 'mYH0tel#7102!Aur0ra' \
    -h db.myhotel.io
    -e $1 \
      myhotel_production
}

jdk() {
  version=$1
  export JAVA_HOME=$(/usr/libexec/java_home -v"$version");
  java -version
}

get_deploy_ip() {
  aws ec2 describe-instances |
  jq --raw-output '.Reservations | map(select(.Instances[0].KeyName == "ec2-test-deploy"))[0].Instances[0].PublicIpAddress'
}
ssh_deploy_login() {
  pem_path=~/Downloads/ec2-test-deploy.pem
  user=ec2-user

  aws ec2 start-instances --instance-ids i-0bb00a22a848e4cc2 --region sa-east-1 > /dev/null #starting aws computer for deploy
  sleep 3

  ssh -i ${pem_path}${user}@$(get_deploy_ip)
}

ssh_deploy_kill() {
  aws ec2 start-instances --instance-ids i-0bb00a22a848e4cc2 --region sa-east-1 > /dev/null #starting aws computer for deploy
}
